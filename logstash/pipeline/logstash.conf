input {
	file {
		path => "/mnt/auditlogs/audit.log"
		start_position => "beginning"
	}
}

filter {
  grok {
      match => {"message" => "%{TIMESTAMP_ISO8601} \[AUDT:(?<kvpairs>.*\[ATYP\(FC32\):[SW]PUT\].*)\]"}
      add_tag => ["start"]
  }
  if "start" not in [tags] {
    grok {
      match => {"message" => "%{TIMESTAMP_ISO8601} \[AUDT:(?<kvpairs>.*\[ATYP\(FC32\):ORLM\].*)\]"}
      add_tag => ["end"]
      remove_tag => ["_grokparsefailure"]
    }
  }
  if "start" not in [tags] and "end" not in [tags] {
    grok {
        match => {"message" => "%{TIMESTAMP_ISO8601} \[AUDT:%{GREEDYDATA:kvpairs}\]"}
        remove_tag => ["_grokparsefailure"]
    }
  }

  kv {
    source => "kvpairs"
    remove_field => [ "kvpairs" ] # Delete the field afterwards
    value_split => ":"
    field_split => "\[\]"
  }

  mutate
  {
    remove_field => ["message"]
    convert      => {
                    "ANID(UI32)" => "integer"
                    "ASES(UI64)" => "integer"
                    "ASQN(UI64)" => "integer"
                    "ATIM(UI64)" => "integer"
                    "AVER(UI32)" => "integer"
                    "CBID(UI64)" => "integer"
                    "CSIZ(UI64)" => "integer"
                    "TIME(UI64)" => "integer"
                    "HSID(UI64)" => "integer"
                    "CTAS(UI64)" => "integer"
                    "CTDS(UI32)" => "integer"
                    "CTSR(UI32)" => "integer"
                    "CTSS(UI64)" => "integer"
                    "SVIP(UI32)" => "integer"
                    }
  }

  ruby {
    code => "event.set('unixdate', event.get('ATIM(UI64)') / 1000)"
  }

  date {
    match => ["unixdate", "UNIX_MS"]
    target => "@timestamp"
  }

  elapsed {
      start_tag => "start"
      end_tag => "end"
      unique_id_field => "UUID(CSTR)"
      timeout => "604800"
      new_event_on_match => false
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    workers => 1
  }
}
